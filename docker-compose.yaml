version: '3.8'

x-env_in_app: &env-fields
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  POSTGRES_DB: ${POSTGRES_DB}
  POSTGRES_NAME: ${POSTGRES_NAME}
  SOCIAL_AUTH_VK_OAUTH2_KEY: ${SOCIAL_AUTH_VK_OAUTH2_KEY}
  SOCIAL_AUTH_VK_OAUTH2_SECRET: ${SOCIAL_AUTH_VK_OAUTH2_SECRET}
  SECRET_KEY: ${SECRET_KEY}
  DB_HOST: db
  DEBUG: 1

services:
  db:
    image: postgres:12.4-alpine
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U todopostgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data_todo2:/var/lib/postgresql/data
    environment:
      <<: *env-fields
    restart: unless-stopped
    ports:
#    - "${DB_PORT}:5432"
    - "5432:5432"
    env_file:
    - ./.env
#    networks:
#      - db-network
  api:
    build:
      context: .
    ports:
      - "8000:8000"
    volumes:
      - ./:/code
    environment:
      DB_HOST: db
      DEBUG: 1
#    networks:
#      - app-network
#      - db-network
    depends_on:
      db:
        condition: service_healthy
      migrations:
        condition: service_started
  frontend:
    image: sermalenk/skypro-front:base
#    build:
#      context: ./todo-list-frontend/
#      dockerfile: ../todo-list-frontend/Dockerfile
#    volumes:
#      - frontend_todo:/app/result_build
    volumes:
      - type: bind
        source: ./nginx.conf
        target: /etc/nginx/conf.d/default.conf
#    networks:
#      - app-network
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "80:80"
  migrations:
    build:
      context: .
#    networks:
#      - app-network
#      - db-network
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_HOST: db
    command: >
      /bin/sh -c "python manage.py migrate
      && python manage.py loadall"
      
#networks:
#  app-network:
#  db-network:

volumes:
  postgres_data_todo2:
#  django_33_finalPrj:
#    external: true
#  frontend_todo: